name: Smoke Test

on:
  push:
    branches:
      - main
      - release/*
  pull_request:

jobs:
  rust-build-and-test:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: rust
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Check Rust version
        run: cargo --version

      - name: Check Format
        # fix formatting with: cargo fmt --manifest-path=rust/Cargo.toml --all
        run: cargo fmt --manifest-path=Cargo.toml --all --check

      - name: Build
        run: cargo build --verbose --features untrusted,bindings-python
      
      - name: Check --no-default-features
        run: cargo check --verbose --no-default-features --features untrusted,ffi

      - name: Test
        run: cargo test --verbose --features untrusted,ffi

      - name: Check that generated python is up to date
        run: git diff --exit-code

      - name: Upload libs
        uses: actions/upload-artifact@v3
        with:
          name: libs
          path: |
            rust/target/debug/libopendp.so
            rust/target/debug/libopendp.a
      
      - name: Prepare vendored sources
        run: |
          echo "Stage R"
          cd ..
          cargo vendor --manifest-path rust/Cargo.toml
          tar --create --xz --no-xattrs -f vendor.tar.xz vendor
          
      - name: Upload vendored sources
        uses: actions/upload-artifact@v3
        with:
          name: vendor
          path: vendor.tar.xz

  python-lint:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          # There is a long ignore list in .flake8.
          flake8 .. --count --show-source --statistics

  python-type:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install -r requirements-dev.txt
          
          # not installed via requirements-dev because pip-compile fixes the numpy version
          # no fixed numpy version is compatible with both 3.8 and 3.12
          python -m pip install scikit-learn

      - name: Type check with mypy
        run: |
          mypy .

  python-test:
    needs: rust-build-and-test
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: python
    strategy:
      matrix:
        python-version: [3.8, 3.12]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('python/setup.cfg') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt

      - name: Download libs
        uses: actions/download-artifact@v3
        with:
          name: libs
          path: python/src/opendp/lib
      
      - name: Install package
        run: python -m pip install -e .[scikit-learn]

      - name: Test
        run: coverage run -m pytest -v

      - name: Test coverage
        run: coverage report

  docs-links:
    needs: rust-build-and-test # TODO: Is this needed?
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: docs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Pandoc
        run: sudo apt-get install -y pandoc

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: Build docs
        run: make html

      - name: Check links
        run: linkchecker -f linkchecker.cfg build/html/index.html

  python-notebooks:
    needs: rust-build-and-test
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: docs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('python/setup.cfg') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest nbmake pytest-xdist
          python -m pip install -r requirements_notebooks.txt

      - name: Download libs
        uses: actions/download-artifact@v3
        with:
          name: libs
          path: python/src/opendp/lib

      - name: Install package
        run: (cd ../python && python -m pip install -e .)

      - name: Test
        run: |
          shopt -s globstar
          pytest --nbmake source/**/*.ipynb -n=auto


  R-test:
    needs: rust-build-and-test
    runs-on: ubuntu-22.04
    env:
      OPENDP_LIB_DIR: ${{ github.workspace }}/libs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download libs
        uses: actions/download-artifact@v3
        with:
          name: libs
          path: libs/

      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          working-directory: R/opendp
          extra-packages: devtools,local::.

      - name: Test
        working-directory: R/opendp/
        run: Rscript -e 'devtools::test(reporter = c("summary", "fail"))'

      # - uses: r-lib/actions/check-r-package@v2
      #   with:
      #     working-directory: R/opendp

      # - name: Build
      #   working-directory: ./R/opendp/
      #   run: R CMD build .
        
      # - name: 
      #   working-directory: ./R/opendp/
      #   run: R CMD check opendp_*.tar.gz

      - name: Clean R package
        run: bash tools/r_stage.sh -c
      
      - name: Download vendor
        uses: actions/download-artifact@v3
        with:
          name: vendor
          path: ./
  
      - name: Stage R package sources
        run: |
          echo "Stage R"

          # for preparing authors and license note
          mkdir vendor
          tar --extract --xz -f vendor.tar.xz -C ./vendor

          echo "Prepare inst/AUTHORS and LICENSE.note"
          Rscript tools/update_authors.R

          echo "Tar library sources into R/opendp/src/rust"
          tar --create --xz --no-xattrs --file=R/opendp/src/opendp.tar.xz rust

          echo "Move vendor.tar.xz into R/opendp/src/rust"
          mv vendor.tar.xz R/opendp/src

      - name: Push to r-latest branch
        run: |
          git fetch
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"

          # create brand new history each time
          git checkout --orphan r-latest

          git add R/opendp/ --force
          echo "Push R package to r-latest branch"
          git commit --allow-empty-message --message "$(git log $(git rev-parse origin/main) --oneline --format=%B -n1 | head -n1)"
          git remote set-url origin "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"
          git push --force origin r-latest
