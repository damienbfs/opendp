name: Build Channel
on:
  workflow_call:
    inputs:
      channel:
        type: string
        required: true
        default: nightly
      fake:
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      channel:
        description: Release Channel
        type: choice
        options:
          - nightly
          - beta
          - stable
        required: true
        default: nightly
      fake:
        description: Fake Build
        type: boolean
        required: true
        default: false
env:
  FEATURES: untrusted,ffi


jobs:
  credential-check:
    runs-on: ubuntu-22.04
    steps:
      - name: Check if user is an administrator
        uses: lannonbr/repo-permission-check-action@2.0.0
        with:
          permission: admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
          cache: pip

      - name: Assert version
        run: |
          pip install -r tools/requirements-assert_version.txt
          python tools/assert_version.py


  libs-build-windows:
    if: ${{ !inputs.fake }}
    runs-on: windows-latest
    needs: credential-check
    env:
      MSYS: winsymlinks:nativestrict
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: m4

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~\.cargo\bin
            ~\.cargo\registry\index
            ~\.cargo\registry\cache
            ~\.cargo\git\db
            ~\AppData\Local\gmp-mpfr-sys
            rust\target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for windows
        run: bash tools/rust_build.sh -i -r -t -f "$FEATURES"

      - name: Upload .dll
        uses: actions/upload-artifact@v3
        with:
          name: libs
          # Unnecessary '*' in path will cause artifact to include parent directories starting at that element.
          path: rust/target*/release/opendp.dll


  libs-build-macos:
    if: ${{ !inputs.fake }}
    runs-on: macos-11
    needs: credential-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/Library/Caches/gmp-mpfr-sys
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for macos x86_64
        run: bash tools/rust_build.sh -i -r -t -g x86_64-apple-darwin -f "$FEATURES"
        env:
          CC: clang -target x86_64-apple-darwin

      - name: Create Rust build for macos aarch64 (no tests)
        # include python bindings generation to get updated links in python codegen
        run: bash tools/rust_build.sh -i -r -g aarch64-apple-darwin -f "$FEATURES,bindings-python"
        env:
          CC: clang -target aarch64-apple-darwin

      - name: Create universal binary of Rust build for macos
        # https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary#Update-the-Architecture-List-of-Custom-Makefiles
        run: |
          mkdir -p rust/target/release
          lipo \
              rust/target/x86_64-apple-darwin/release/libopendp.dylib \
              rust/target/aarch64-apple-darwin/release/libopendp.dylib \
              -output rust/target/release/libopendp.dylib -create

      - name: Upload .dylib
        uses: actions/upload-artifact@v3
        with:
          name: libs
          # Unnecessary '*' in path will cause artifact to include parent directories starting at that element.
          path: rust/target*/release/libopendp.dylib

      # need to upload at least one set up updated bindings
      - name: Upload bindings
        uses: actions/upload-artifact@v3
        with:
          name: python_bindings
          path: python/src/opendp/


  libs-build-linux:
    if: ${{ !inputs.fake }}
    runs-on: ubuntu-20.04
    needs: credential-check
    strategy:
      matrix:
        architecture: [x86_64, aarch64]
    env:
      # This image is important. The default manylinux2014 images are problematic to configure for cross-compilation
      # in a way that will satisfy the gmp configure script.
      DOCKER_IMAGE: messense/manylinux2014-cross:${{ matrix.architecture }}
      TARGET: ${{ matrix.architecture }}-unknown-linux-gnu
      ARCH_LIB: libopendp-${{ matrix.architecture }}.so
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cache/gmp-mpfr-sys
            rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Create Rust build for linux
        env:
          # Only run tests for native compile
          FLAGS: ${{ matrix.architecture == 'x86_64' && '-i -r -t' || '-i -r' }}
        run: docker run --rm -v `pwd`:/io $DOCKER_IMAGE bash -c "cd /io && bash tools/rust_build.sh $FLAGS -g $TARGET -f \"$FEATURES\""

      - name: Upload .so
        uses: actions/upload-artifact@v3
        with:
          name: libs
          # Unnecessary '*' in path will cause artifact to include parent directories starting at that element.
          path: rust/target*/${{ env.TARGET }}/release/libopendp.so


  libs-build-fake:
    if: ${{ inputs.fake }}
    runs-on: ubuntu-20.04
    needs: credential-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Create fake libs
        run: |
          mkdir -p rust/target/release/
          echo windows >rust/target/release/opendp.dll
          echo macos >rust/target/release/libopendp.dylib
          mkdir -p rust/target/x86_64-unknown-linux-gnu/release/
          echo linux-x86_64 > rust/target/x86_64-unknown-linux-gnu/release/libopendp.so
          mkdir -p rust/target/aarch64-unknown-linux-gnu/release/
          echo linux-aarch64 > rust/target/aarch64-unknown-linux-gnu/release/libopendp.so

      - name: Upload fake libs
        uses: actions/upload-artifact@v3
        with:
          name: libs
          path: |
            rust/target*/release/opendp.dll
            rust/target*/release/libopendp.dylib
            rust/target*/x86_64-unknown-linux-gnu/release/libopendp.so
            rust/target*/aarch64-unknown-linux-gnu/release/libopendp.so

      - name: Upload bindings
        uses: actions/upload-artifact@v3
        with:
          name: python_bindings
          path: python/src/opendp/


  libs-build:
    runs-on: ubuntu-20.04
    needs: [ libs-build-windows, libs-build-macos, libs-build-linux, libs-build-fake ]
    if: |
      always() &&
      ((inputs.fake && needs.libs-build-fake.result == 'success') ||
       (!inputs.fake && needs.libs-build-windows.result == 'success' && needs.libs-build-macos.result == 'success' && needs.libs-build-linux.result == 'success'))
    steps:


  python-build:
    runs-on: ubuntu-20.04
    needs: libs-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.channel }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
          cache: pip

      - name: Download libs
        uses: actions/download-artifact@v3
        with:
          name: libs
          # Artifact contains all libs with leading paths starting at target
          path: rust/

      - name: Dump directory
        run: |
          ls -lR rust/target/

      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: python_bindings
          path: python/src/opendp/

      - name: Create Python package
        run: bash tools/python_build.sh -i

      - name: Upload Python wheel
        uses: actions/upload-artifact@v3
        with:
          name: python_wheel
          path: python/wheelhouse/opendp-*-py3-none-any.whl
